/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Sett;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
//import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFPicture;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.*;

/**
 *
 * @author IS Mohammed
 */
public class SetupImg extends javax.swing.JFrame {

    /**
     * Creates new form SetupImg
     */
    
    DefaultListModel<Object> stockModel = new DefaultListModel<>();
    List<String> sortedstock = new ArrayList<String>();
    Map priceMap = new HashMap();
    Map qtyMap = new HashMap();
    
    public SetupImg() {
        initComponents();
        try{
        loadStock();
        }catch(Exception tt){
            tt.printStackTrace();
        }
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
    jList_Items.setModel(stockModel);
    }

    
    private void loadStock() throws IOException{
        String excelFilePath = SystemParam.Stocks_file_path;
        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream(new File(excelFilePath));
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
         
        Workbook workbook = null;
        try {
            workbook = new XSSFWorkbook(inputStream);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        Sheet firstSheet = workbook.getSheetAt(0);
        Iterator<Row> iterator = firstSheet.iterator();
        
        boolean skiprow = true;
        while (iterator.hasNext()) {
            Row nextRow = iterator.next();
            Iterator<Cell> cellIterator = nextRow.cellIterator();
             
             if(skiprow){
                 skiprow = false;
                 continue;
             }
             String rowString = "";
            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                 
                switch (cell.getCellType()) {
                    case Cell.CELL_TYPE_STRING:
                        String stockName = cell.getStringCellValue();
                        rowString += stockName;
                        break;
                    case Cell.CELL_TYPE_BOOLEAN:
                        break;
                    case Cell.CELL_TYPE_NUMERIC:
                        int stockPrice = 0;
                        if(cell.getColumnIndex() == 2){
                            stockPrice = (int) cell.getNumericCellValue();
                            rowString += "~"+stockPrice+"";
                        }
                        int stockQty = 0;
                        if(cell.getColumnIndex() == 3){
                            stockQty = (int) cell.getNumericCellValue();
                            rowString += "~"+stockQty+"";
                        }
                        break;
                }
            }
            sortedstock.add(rowString);
        }
         
        
        inputStream.close();
        Collections.sort(sortedstock);
        for(String s : sortedstock){
        stockModel.addElement(s.split("~")[0]);
        priceMap.put(s.split("~")[0], s.split("~")[1]);
        qtyMap.put(s.split("~")[0], s.split("~")[2]);
        //System.out.println(priceMap);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList_Items = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton_Update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jList_Items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_ItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList_Items);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 255, 102));
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setText("Image Preview");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(0));

        jButton_Update.setText("Update Excel");
        jButton_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Update)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fc = new JFileChooser("./");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "png", "jpg");
        fc.setFileFilter(filter);
        int r = fc.showOpenDialog(jLabel1);
        if(r == JFileChooser.APPROVE_OPTION){
            try{
                String str = fc.getSelectedFile().getAbsolutePath();
                System.out.println(str);
                SystemParam.imags.put(jList_Items.getSelectedValue().toString(), str);
                ImageIcon img = new ImageIcon(fitimage(str, jLabel1.getWidth(), jLabel1.getHeight()));
                jLabel1.setIcon(img);
            }catch(Exception ex1){
                    ex1.printStackTrace();
                }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList_ItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_ItemsMouseClicked
        if(evt.getClickCount() == 2){
            String str = "";
            try{
            str = SystemParam.imags.get(jList_Items.getSelectedValue().toString()).toString();
            }catch(Exception ex){
                jLabel1.setIcon(new ImageIcon(""));
            }
            ImageIcon img = new ImageIcon(fitimage(str, jLabel1.getWidth(), jLabel1.getHeight()));
                jLabel1.setIcon(img);
            
        }
    }//GEN-LAST:event_jList_ItemsMouseClicked

    private void jButton_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateActionPerformed
        try {
            //JOptionPane.showMessageDialog(rootPane, "Please Make sure you close the Excel workbook!!");
            //Thread Wait for 3 seconds
            File ff = new File(SystemParam.Stocks_file_path);
            XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(ff));
            Sheet sheet = wb.getSheet("Stocks");
            int TotalRows  = sheet.getLastRowNum();
            sheet.setColumnWidth(4, 14000);
            for (int i=0;i<=TotalRows;i++){
                if(i==0)continue;
                Row row = sheet.getRow(i);
                
                String itemName = row.getCell(1).getStringCellValue().toString();
                if(SystemParam.imags.containsKey(itemName) && row.getCell(1)
                        .getStringCellValue().equalsIgnoreCase(itemName)){
                    row.setHeight((short) 1400);
                    InputStream my_banner_image = new FileInputStream(SystemParam.imags.get(itemName).toString());
                    byte[] bytes = IOUtils.toByteArray(my_banner_image);
                    int my_picture_id = wb.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);
                    my_banner_image.close();
                    XSSFDrawing drawing = (XSSFDrawing) sheet.createDrawingPatriarch();
            XSSFClientAnchor my_anchor = new XSSFClientAnchor();
            my_anchor.setCol1(4); 
            my_anchor.setRow1((i+1)-1);
            my_anchor.setCol2(5);
            my_anchor.setRow2(i+1);
            /* Invoke createPicture and pass the anchor point and ID */
            XSSFPicture my_picture = drawing.createPicture(my_anchor, my_picture_id);
            my_picture.resize(1, .95);//Picture Size Specification
                }
            }
            
            // Write the output to a file
        FileOutputStream fileOut = new FileOutputStream(ff);
        wb.write(fileOut);
        fileOut.close();
            
        } catch (Exception ex) {
            Logger.getLogger(SetupImg.class.getName()).log(Level.SEVERE, null, ex);
        }
       JOptionPane.showMessageDialog(rootPane, "Excel Update Done !"); 
    }//GEN-LAST:event_jButton_UpdateActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
        this.setVisible(false);
        return;
        
    }//GEN-LAST:event_formWindowClosed
private Image fitimage(String img , int w , int h)
    {
    BufferedImage resizedimage = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
    Graphics2D g2 = resizedimage.createGraphics();
    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    try{
    g2.drawImage(ImageIO.read(new URL("file:///"+img)), 0, 0,w,h,null);
    }catch(Exception ex){
        ex.printStackTrace();
    }
    g2.dispose();
    return resizedimage;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetupImg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetupImg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetupImg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetupImg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SetupImg().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList_Items;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
